<?php
/**
 * Plugin Name: Smart Restock & Waitlist Manager
 * Plugin URI: https://yourwebsite.com/smart-restock-waitlist-manager
 * Description: Advanced WooCommerce plugin for managing product restocks and customer waitlists with supplier notifications, analytics, and Pro features.
 * Version: 1.0.0
 * Author: Your Name
 * Author URI: https://yourwebsite.com
 * Text Domain: smart-restock-waitlist
 * Domain Path: /languages
 * Requires at least: 5.0
 * Tested up to: 6.4
 * WC requires at least: 6.0
 * WC tested up to: 8.0
 * License: GPL v2 or later
 * License URI: https://www.gnu.org/licenses/gpl-2.0.html
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// Define plugin constants
define('SRWM_VERSION', '1.0.0');
define('SRWM_PLUGIN_FILE', __FILE__);
define('SRWM_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('SRWM_PLUGIN_URL', plugin_dir_url(__FILE__));
define('SRWM_PLUGIN_BASENAME', plugin_basename(__FILE__));

/**
 * Complete License and Update Integration for smart-restock-waitlist-manager
 * Generated by WP Licensing Manager - COMPLETE VERSION
 * 
 * Add this code to your premium plugin to enable licensing and automatic updates.
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

class Smart_restock_waitlist_manager_License_Manager {
    
    private $plugin_file;
    private $plugin_slug;
    private $version;
    private $license_server_url;
    private $license_key;
    
    public function __construct($plugin_file, $version) {
        $this->plugin_file = $plugin_file;
        $this->plugin_slug = 'smart-restock-waitlist-manager';
        $this->version = $version;
        $this->license_server_url = 'https://stackcastle.com';
        $this->license_key = get_option($this->plugin_slug . '_license_key');
        
        add_action('admin_init', array($this, 'init'));
        add_action('admin_menu', array($this, 'license_menu'));
        add_filter('pre_set_site_transient_update_plugins', array($this, 'check_for_update'));
        add_filter('plugins_api', array($this, 'plugins_api_filter'), 10, 3);
        add_action('admin_notices', array($this, 'license_notices'));
    }
    
    public function init() {
        if (isset($_POST['activate_license']) && wp_verify_nonce($_POST['license_nonce'], 'license_nonce')) {
            $this->activate_license();
        }
        
        if (isset($_POST['deactivate_license']) && wp_verify_nonce($_POST['license_nonce'], 'license_nonce')) {
            $this->deactivate_license();
        }
        
        if (isset($_POST['check_license']) && wp_verify_nonce($_POST['license_nonce'], 'license_nonce')) {
            $this->check_license_status();
        }
        
        if (isset($_POST['force_update_check']) && wp_verify_nonce($_POST['license_nonce'], 'license_nonce')) {
            $this->force_update_check();
        }
    }
    
    public function license_menu() {
        add_submenu_page(
            'smart-restock-waitlist',
            'smart-restock-waitlist-manager License',
            'License',
            'manage_woocommerce',
            $this->plugin_slug . '-license',
            array($this, 'license_page')
        );
    }
    
    public function license_page() {
        $license_key = get_option($this->plugin_slug . '_license_key');
        $status = get_option($this->plugin_slug . '_license_status');
        $last_check = get_option($this->plugin_slug . '_license_last_check');
        
        ?>
        <div class="wrap">
            <h1>smart-restock-waitlist-manager License Settings</h1>
            
            <div class="card" style="max-width: 600px;">
                <h2>License Management</h2>
                
                <form method="post" action="">
                    <?php wp_nonce_field('license_nonce', 'license_nonce'); ?>
                    
                    <table class="form-table">
                        <tr>
                            <th scope="row">License Key</th>
                            <td>
                                <input type="text" name="license_key" value="<?php echo esc_attr($license_key); ?>" 
                                       class="regular-text" placeholder="Enter your license key" />
                                <p class="description">Enter the license key you received after purchase.</p>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">Status</th>
                            <td>
                                <?php if ($status == 'valid'): ?>
                                    <span style="color: green; font-weight: bold;">✓ Active</span>
                                    <p class="description">Your license is active and updates are enabled.</p>
                                <?php elseif ($status == 'invalid'): ?>
                                    <span style="color: red; font-weight: bold;">✗ Invalid</span>
                                    <p class="description">Please check your license key and try again.</p>
                                <?php elseif ($status == 'expired'): ?>
                                    <span style="color: orange; font-weight: bold;">⚠ Expired</span>
                                    <p class="description">Your license has expired. Please renew to continue receiving updates.</p>
                                <?php else: ?>
                                    <span style="color: gray;">Not activated</span>
                                    <p class="description">Enter your license key and activate to enable updates.</p>
                                <?php endif; ?>
                                
                                <?php if ($last_check): ?>
                                    <p class="description">Last checked: <?php echo date('Y-m-d H:i:s', $last_check); ?></p>
                                <?php endif; ?>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">Current Version</th>
                            <td><?php echo esc_html($this->version); ?></td>
                        </tr>
                    </table>
                    
                    <p class="submit">
                        <?php if ($status == 'valid'): ?>
                            <input type="submit" name="deactivate_license" value="Deactivate License" class="button" />
                            <input type="submit" name="check_license" value="Check Status" class="button" />
                            <input type="submit" name="force_update_check" value="Check for Updates Now" class="button-secondary" />
                            <input type="hidden" name="force-check" value="1" />
                        <?php else: ?>
                            <input type="submit" name="activate_license" value="Activate License" class="button-primary" />
                        <?php endif; ?>
                    </p>
                </form>
            </div>
        </div>
        
        <style>
        .card { background: #fff; border: 1px solid #ccd0d4; padding: 20px; border-radius: 4px; }
        .card h2 { margin-top: 0; }
        </style>
        <?php
    }
    
    public function activate_license() {
        if (!isset($_POST['license_key']) || empty($_POST['license_key'])) {
            add_action('admin_notices', function() {
                echo '<div class="notice notice-error"><p>Please enter a license key.</p></div>';
            });
            return;
        }
        
        $license_key = sanitize_text_field($_POST['license_key']);
        $domain = parse_url(home_url(), PHP_URL_HOST);
        
        $response = wp_remote_post($this->license_server_url . '/wp-json/licensing/v1/activate', array(
            'body' => array(
                'license_key' => $license_key,
                'domain' => $domain,
                'product_slug' => $this->plugin_slug
            ),
            'timeout' => 30,
            'sslverify' => true
        ));
        
        if (is_wp_error($response)) {
            update_option($this->plugin_slug . '_license_status', 'error');
            add_action('admin_notices', function() use ($response) {
                echo '<div class="notice notice-error"><p>Connection Error: ' . esc_html($response->get_error_message()) . '</p></div>';
            });
            return;
        }
        
        $body = json_decode(wp_remote_retrieve_body($response), true);
        
        if (isset($body['success']) && $body['success']) {
            update_option($this->plugin_slug . '_license_key', $license_key);
            update_option($this->plugin_slug . '_license_status', 'valid');
            update_option($this->plugin_slug . '_license_last_check', time());
            
            add_action('admin_notices', function() {
                echo '<div class="notice notice-success"><p>License activated successfully! Updates are now enabled.</p></div>';
            });
        } else {
            update_option($this->plugin_slug . '_license_status', 'invalid');
            $error_message = isset($body['error']) ? $body['error'] : 'Unknown error occurred';
            
            add_action('admin_notices', function() use ($error_message) {
                echo '<div class="notice notice-error"><p>Activation Error: ' . esc_html($error_message) . '</p></div>';
            });
        }
    }
    
    public function deactivate_license() {
        $license_key = get_option($this->plugin_slug . '_license_key');
        $domain = parse_url(home_url(), PHP_URL_HOST);
        
        if (empty($license_key)) {
            add_action('admin_notices', function() {
                echo '<div class="notice notice-error"><p>No license key found to deactivate.</p></div>';
            });
            return;
        }
        
        $response = wp_remote_post($this->license_server_url . '/wp-json/licensing/v1/deactivate', array(
            'body' => array(
                'license_key' => $license_key,
                'domain' => $domain,
                'product_slug' => $this->plugin_slug
            ),
            'timeout' => 30,
            'sslverify' => true
        ));
        
        if (!is_wp_error($response)) {
            $body = json_decode(wp_remote_retrieve_body($response), true);
            
            if (isset($body['success']) && $body['success']) {
                update_option($this->plugin_slug . '_license_status', 'inactive');
                add_action('admin_notices', function() {
                    echo '<div class="notice notice-success"><p>License deactivated successfully.</p></div>';
                });
            } else {
                add_action('admin_notices', function() use ($body) {
                    $error = isset($body['error']) ? $body['error'] : 'Deactivation failed';
                    echo '<div class="notice notice-warning"><p>' . esc_html($error) . '</p></div>';
                });
            }
        } else {
            update_option($this->plugin_slug . '_license_status', 'inactive');
            add_action('admin_notices', function() {
                echo '<div class="notice notice-warning"><p>License deactivated locally (server unreachable).</p></div>';
            });
        }
    }
    
    public function check_license_status() {
        $license_key = get_option($this->plugin_slug . '_license_key');
        
        if (empty($license_key)) {
            add_action('admin_notices', function() {
                echo '<div class="notice notice-error"><p>No license key found.</p></div>';
            });
            return;
        }
        
        $response = wp_remote_post($this->license_server_url . '/wp-json/licensing/v1/validate', array(
            'body' => array(
                'license_key' => $license_key,
                'product_slug' => $this->plugin_slug
            ),
            'timeout' => 30,
            'sslverify' => true
        ));
        
        if (!is_wp_error($response)) {
            $body = json_decode(wp_remote_retrieve_body($response), true);
            
            if (isset($body['success']) && $body['success']) {
                update_option($this->plugin_slug . '_license_status', 'valid');
                update_option($this->plugin_slug . '_license_last_check', time());
                
                add_action('admin_notices', function() {
                    echo '<div class="notice notice-success"><p>License is valid and active!</p></div>';
                });
            } else {
                update_option($this->plugin_slug . '_license_status', 'invalid');
                $error = isset($body['error']) ? $body['error'] : 'License validation failed';
                
                add_action('admin_notices', function() use ($error) {
                    echo '<div class="notice notice-error"><p>' . esc_html($error) . '</p></div>';
                });
            }
        } else {
            add_action('admin_notices', function() use ($response) {
                echo '<div class="notice notice-error"><p>Connection Error: ' . esc_html($response->get_error_message()) . '</p></div>';
            });
        }
    }
    
    public function force_update_check() {
        // Clear the version cache to force immediate update check
        $cache_key = $this->plugin_slug . '_remote_version';
        delete_transient($cache_key);
        
        // Clear WordPress update caches
        delete_site_transient('update_plugins');
        
        // Check for updates immediately
        $remote_version = $this->get_remote_version();
        
        if ($remote_version && version_compare($this->version, $remote_version, '<')) {
            add_action('admin_notices', function() use ($remote_version) {
                echo '<div class="notice notice-info"><p><strong>Update Available!</strong> Version ' . esc_html($remote_version) . ' is now available. Check your WordPress Updates page to install.</p></div>';
            });
        } else {
            add_action('admin_notices', function() {
                echo '<div class="notice notice-success"><p>No updates available. You have the latest version!</p></div>';
            });
        }
    }
    
    public function check_for_update($transient) {
        if (empty($transient->checked)) {
            return $transient;
        }
        
        $plugin_basename = plugin_basename($this->plugin_file);
        
        if (!isset($transient->checked[$plugin_basename])) {
            return $transient;
        }
        
        // Only check for updates if license is valid
        $status = get_option($this->plugin_slug . '_license_status');
        if ($status !== 'valid') {
            return $transient;
        }
        
        $remote_version = $this->get_remote_version();
        
        if ($remote_version && version_compare($this->version, $remote_version, '<')) {
            $transient->response[$plugin_basename] = (object) array(
                'slug' => dirname($plugin_basename),
                'new_version' => $remote_version,
                'url' => '',
                'package' => $this->get_download_url()
            );
        }
        
        return $transient;
    }
    
    public function plugins_api_filter($res, $action, $args) {
        if ($action != 'plugin_information') {
            return $res;
        }
        
        if ($args->slug != dirname(plugin_basename($this->plugin_file))) {
            return $res;
        }
        
        $remote_version = $this->get_remote_version();
        $changelog = $this->get_changelog();
        
        return (object) array(
            'name' => 'smart-restock-waitlist-manager',
            'slug' => dirname(plugin_basename($this->plugin_file)),
            'version' => $remote_version ?: $this->version,
            'author' => 'Your Company',
            'homepage' => '',
            'requires' => '5.0',
            'tested' => '6.4',
            'downloaded' => 0,
            'last_updated' => date('Y-m-d'),
            'sections' => array(
                'description' => 'Premium plugin with licensing and automatic updates.',
                'changelog' => $changelog ?: 'No changelog available.'
            ),
            'download_link' => $this->get_download_url()
        );
    }
    
    private function get_remote_version() {
        $license_key = get_option($this->plugin_slug . '_license_key');
        
        if (empty($license_key)) {
            return false;
        }
        
        // Cache remote version check for 1 hour (improved for faster update detection)
        $cache_key = $this->plugin_slug . '_remote_version';
        $cached_version = get_transient($cache_key);
        
        // Check if user manually requested update check
        $force_check = isset($_GET['force-check']) || isset($_POST['force-check']);
        
        if ($cached_version !== false && !$force_check) {
            return $cached_version;
        }
        
        $response = wp_remote_post($this->license_server_url . '/wp-json/licensing/v1/update-check', array(
            'body' => array(
                'license_key' => $license_key,
                'product_slug' => $this->plugin_slug,
                'current_version' => $this->version
            ),
            'timeout' => 30,
            'sslverify' => true
        ));
        
        if (!is_wp_error($response)) {
            $body = json_decode(wp_remote_retrieve_body($response), true);
            
            if (isset($body['success']) && $body['success'] && isset($body['latest_version'])) {
                $remote_version = $body['latest_version'];
                set_transient($cache_key, $remote_version, 1 * HOUR_IN_SECONDS);
                return $remote_version;
            }
        }
        
        return false;
    }
    
    private function get_changelog() {
        $license_key = get_option($this->plugin_slug . '_license_key');
        
        if (empty($license_key)) {
            return '';
        }
        
        $response = wp_remote_post($this->license_server_url . '/wp-json/licensing/v1/update-check', array(
            'body' => array(
                'license_key' => $license_key,
                'product_slug' => $this->plugin_slug,
                'current_version' => $this->version
            ),
            'timeout' => 30,
            'sslverify' => true
        ));
        
        if (!is_wp_error($response)) {
            $body = json_decode(wp_remote_retrieve_body($response), true);
            
            if (isset($body['success']) && $body['success'] && isset($body['changelog'])) {
                return $body['changelog'];
            }
        }
        
        return '';
    }
    
    private function get_download_url() {
        $license_key = get_option($this->plugin_slug . '_license_key');
        
        if (empty($license_key)) {
            return '';
        }
        
        return $this->license_server_url . '/wp-json/licensing/v1/update-download?license_key=' . 
               urlencode($license_key) . '&product_slug=' . urlencode($this->plugin_slug);
    }
    
    public function license_notices() {
        $status = get_option($this->plugin_slug . '_license_status');
        $current_screen = get_current_screen();
        
        // Only show on relevant admin pages
        if (!$current_screen || strpos($current_screen->id, str_replace('-', '', $this->plugin_slug)) === false) {
            return;
        }
        
        if ($status !== 'valid') {
            echo '<div class="notice notice-warning is-dismissible">';
            echo '<p><strong>' . esc_html($this->plugin_slug) . ':</strong> ';
            
            if ($status === 'expired') {
                echo 'Your license has expired. <a href="' . admin_url('options-general.php?page=' . $this->plugin_slug . '-license') . '">Renew your license</a> to continue receiving updates.';
            } else {
                echo 'Please <a href="' . admin_url('options-general.php?page=' . $this->plugin_slug . '-license') . '">activate your license</a> to enable automatic updates.';
            }
            
            echo '</p></div>';
        }
    }
    
    /**
     * Check if Pro license is active
     */
    public function is_pro_active() {
        $status = get_option($this->plugin_slug . '_license_status');
        return $status === 'valid';
    }
}

/**
 * Main Plugin Class
 */
class SmartRestockWaitlistManager {
    
    private $license_manager;
    
    public function __construct() {
        // Initialize license manager
        $this->license_manager = new Smart_restock_waitlist_manager_License_Manager(__FILE__, SRWM_VERSION);
        
        // Check if WooCommerce is active
        if (!$this->is_woocommerce_active()) {
            add_action('admin_notices', array($this, 'woocommerce_missing_notice'));
            return;
        }
        
        $this->init();
    }
    
    /**
     * Initialize the plugin
     */
    private function init() {
        // Load text domain
        add_action('init', array($this, 'load_textdomain'));
        
        // Create database tables
        register_activation_hook(__FILE__, array($this, 'create_tables'));
        
        // Load core classes
        $this->load_core_classes();
        
        // Load Pro classes if license is active
        if ($this->license_manager->is_pro_active()) {
            $this->load_pro_classes();
        }
        
        // Initialize admin
        if (is_admin()) {
            $this->init_admin();
        }
        
        // Initialize frontend
        $this->init_frontend();
        
        // Add AJAX handlers
        $this->add_ajax_handlers();
    }
    
    /**
     * Load core classes
     */
    private function load_core_classes() {
        require_once SRWM_PLUGIN_DIR . 'includes/class-srwm-waitlist.php';
        require_once SRWM_PLUGIN_DIR . 'includes/class-srwm-supplier.php';
        require_once SRWM_PLUGIN_DIR . 'includes/class-srwm-email.php';
        require_once SRWM_PLUGIN_DIR . 'includes/class-srwm-analytics.php';
    }
    
    /**
     * Load Pro classes
     */
    private function load_pro_classes() {
        require_once SRWM_PLUGIN_DIR . 'includes/pro/class-srwm-pro-restock.php';
        require_once SRWM_PLUGIN_DIR . 'includes/pro/class-srwm-pro-purchase-order.php';
        require_once SRWM_PLUGIN_DIR . 'includes/pro/class-srwm-pro-csv-upload.php';
    }
    
    /**
     * Initialize admin functionality
     */
    private function init_admin() {
        require_once SRWM_PLUGIN_DIR . 'includes/class-srwm-admin.php';
        require_once SRWM_PLUGIN_DIR . 'admin/class-srwm-admin-dashboard.php';
        
        new SRWM_Admin($this->license_manager);
        new SRWM_Admin_Dashboard($this->license_manager);
    }
    
    /**
     * Initialize frontend functionality
     */
    private function init_frontend() {
        // Initialize core classes with license manager
        $waitlist = SRWM_Waitlist::get_instance($this->license_manager);
        $supplier = SRWM_Supplier::get_instance($this->license_manager);
        
        // Add waitlist form to product pages
        add_action('woocommerce_single_product_summary', array($waitlist, 'display_waitlist_form'), 25);
        
        // Enqueue scripts and styles
        add_action('wp_enqueue_scripts', array($waitlist, 'enqueue_scripts'));
        
        // Hook into stock status changes
        add_action('woocommerce_product_set_stock_status', array($supplier, 'check_stock_levels'), 10, 3);
        add_action('woocommerce_product_set_stock_status', array($waitlist, 'check_restock_notification'), 10, 3);
    }
    
    /**
     * Add AJAX handlers
     */
    private function add_ajax_handlers() {
        // Frontend AJAX
        add_action('wp_ajax_srwm_add_to_waitlist', array($this, 'ajax_add_to_waitlist'));
        add_action('wp_ajax_nopriv_srwm_add_to_waitlist', array($this, 'ajax_add_to_waitlist'));
        
        // Admin AJAX
        add_action('wp_ajax_srwm_restock_product', array($this, 'ajax_restock_product'));
        add_action('wp_ajax_srwm_get_waitlist_data', array($this, 'ajax_get_waitlist_data'));
        add_action('wp_ajax_srwm_export_waitlist', array($this, 'ajax_export_waitlist'));
        add_action('wp_ajax_srwm_get_dashboard_data', array($this, 'ajax_get_dashboard_data'));
        add_action('wp_ajax_srwm_export_dashboard_report', array($this, 'ajax_export_dashboard_report'));
        
        // Pro AJAX handlers
        if ($this->license_manager->is_pro_active()) {
            add_action('wp_ajax_srwm_generate_restock_link', array($this, 'ajax_generate_restock_link'));
            add_action('wp_ajax_srwm_generate_po', array($this, 'ajax_generate_po'));
            add_action('wp_ajax_srwm_generate_csv_upload_link', array($this, 'ajax_generate_csv_upload_link'));
        }
    }
    
    /**
     * AJAX: Add customer to waitlist
     */
    public function ajax_add_to_waitlist() {
        check_ajax_referer('srwm_waitlist_nonce', 'nonce');
        
        $product_id = intval($_POST['product_id']);
        $email = sanitize_email($_POST['email']);
        $name = sanitize_text_field($_POST['name']);
        
        if (empty($email) || !is_email($email)) {
            wp_die(json_encode(array('success' => false, 'message' => __('Please enter a valid email address.', 'smart-restock-waitlist'))));
        }
        
        $result = SRWM_Waitlist::add_customer($product_id, $email, $name);
        
        if ($result) {
            wp_die(json_encode(array('success' => true, 'message' => __('You have been added to the waitlist!', 'smart-restock-waitlist'))));
        } else {
            wp_die(json_encode(array('success' => false, 'message' => __('You are already on the waitlist for this product.', 'smart-restock-waitlist'))));
        }
    }
    
    /**
     * AJAX: Restock product
     */
    public function ajax_restock_product() {
        check_ajax_referer('srwm_admin_nonce', 'nonce');
        
        if (!current_user_can('manage_woocommerce')) {
            wp_die(json_encode(array('success' => false, 'message' => __('Insufficient permissions.', 'smart-restock-waitlist'))));
        }
        
        $product_id = intval($_POST['product_id']);
        $quantity = intval($_POST['quantity']);
        
        $result = SRWM_Waitlist::restock_and_notify($product_id, $quantity);
        
        if ($result) {
            wp_die(json_encode(array('success' => true, 'message' => __('Product restocked successfully!', 'smart-restock-waitlist'))));
        } else {
            wp_die(json_encode(array('success' => false, 'message' => __('Failed to restock product.', 'smart-restock-waitlist'))));
        }
    }
    
    /**
     * AJAX: Get waitlist data
     */
    public function ajax_get_waitlist_data() {
        check_ajax_referer('srwm_admin_nonce', 'nonce');
        
        if (!current_user_can('manage_woocommerce')) {
            wp_die(json_encode(array('success' => false, 'message' => __('Insufficient permissions.', 'smart-restock-waitlist'))));
        }
        
        $product_id = intval($_POST['product_id']);
        $customers = SRWM_Waitlist::get_waitlist_customers($product_id);
        
        wp_die(json_encode(array('success' => true, 'data' => $customers)));
    }
    
    /**
     * AJAX: Export waitlist
     */
    public function ajax_export_waitlist() {
        check_ajax_referer('srwm_admin_nonce', 'nonce');
        
        if (!current_user_can('manage_woocommerce')) {
            wp_die(json_encode(array('success' => false, 'message' => __('Insufficient permissions.', 'smart-restock-waitlist'))));
        }
        
        $product_id = intval($_POST['product_id']);
        $customers = SRWM_Waitlist::get_waitlist_customers($product_id);
        
        $filename = 'waitlist-export-' . date('Y-m-d') . '.csv';
        
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment; filename="' . $filename . '"');
        
        $output = fopen('php://output', 'w');
        fputcsv($output, array('Name', 'Email', 'Date Added', 'Notified'));
        
        foreach ($customers as $customer) {
            fputcsv($output, array(
                $customer->customer_name,
                $customer->customer_email,
                $customer->date_added,
                $customer->notified ? 'Yes' : 'No'
            ));
        }
        
        fclose($output);
        exit;
    }
    
    /**
     * AJAX: Get dashboard data
     */
    public function ajax_get_dashboard_data() {
        check_ajax_referer('srwm_admin_nonce', 'nonce');
        
        if (!current_user_can('manage_woocommerce')) {
            wp_die(json_encode(array('success' => false, 'message' => __('Insufficient permissions.', 'smart-restock-waitlist'))));
        }
        
        $analytics = SRWM_Analytics::get_instance($this->license_manager);
        $data = $analytics->get_dashboard_data();
        
        wp_die(json_encode(array('success' => true, 'data' => $data)));
    }
    
    /**
     * AJAX: Export dashboard report
     */
    public function ajax_export_dashboard_report() {
        check_ajax_referer('srwm_admin_nonce', 'nonce');
        
        if (!current_user_can('manage_woocommerce')) {
            wp_die(json_encode(array('success' => false, 'message' => __('Insufficient permissions.', 'smart-restock-waitlist'))));
        }
        
        $analytics = SRWM_Analytics::get_instance($this->license_manager);
        $analytics->export_analytics_csv();
    }
    
    /**
     * AJAX: Generate restock link (Pro)
     */
    public function ajax_generate_restock_link() {
        check_ajax_referer('srwm_admin_nonce', 'nonce');
        
        if (!current_user_can('manage_woocommerce') || !$this->license_manager->is_pro_active()) {
            wp_die(json_encode(array('success' => false, 'message' => __('Insufficient permissions or Pro license required.', 'smart-restock-waitlist'))));
        }
        
        $product_id = intval($_POST['product_id']);
        $supplier_email = sanitize_email($_POST['supplier_email']);
        
        if (class_exists('SRWM_Pro_Restock')) {
            $restock = SRWM_Pro_Restock::get_instance();
            $result = $restock->generate_restock_link($product_id, $supplier_email);
            wp_die(json_encode($result));
        }
        
        wp_die(json_encode(array('success' => false, 'message' => __('Pro feature not available.', 'smart-restock-waitlist'))));
    }
    
    /**
     * AJAX: Generate purchase order (Pro)
     */
    public function ajax_generate_po() {
        check_ajax_referer('srwm_admin_nonce', 'nonce');
        
        if (!current_user_can('manage_woocommerce') || !$this->license_manager->is_pro_active()) {
            wp_die(json_encode(array('success' => false, 'message' => __('Insufficient permissions or Pro license required.', 'smart-restock-waitlist'))));
        }
        
        $product_id = intval($_POST['product_id']);
        $supplier_data = array(
            'name' => sanitize_text_field($_POST['supplier_name']),
            'email' => sanitize_email($_POST['supplier_email'])
        );
        
        if (class_exists('SRWM_Pro_Purchase_Order')) {
            $po = SRWM_Pro_Purchase_Order::get_instance();
            $result = $po->generate_purchase_order($product_id, $supplier_data);
            wp_die(json_encode($result));
        }
        
        wp_die(json_encode(array('success' => false, 'message' => __('Pro feature not available.', 'smart-restock-waitlist'))));
    }
    
    /**
     * AJAX: Generate CSV upload link (Pro)
     */
    public function ajax_generate_csv_upload_link() {
        check_ajax_referer('srwm_admin_nonce', 'nonce');
        
        if (!current_user_can('manage_woocommerce') || !$this->license_manager->is_pro_active()) {
            wp_die(json_encode(array('success' => false, 'message' => __('Insufficient permissions or Pro license required.', 'smart-restock-waitlist'))));
        }
        
        $supplier_email = sanitize_email($_POST['supplier_email']);
        
        if (class_exists('SRWM_Pro_CSV_Upload')) {
            $csv = SRWM_Pro_CSV_Upload::get_instance();
            $result = $csv->generate_csv_upload_link($supplier_email);
            wp_die(json_encode($result));
        }
        
        wp_die(json_encode(array('success' => false, 'message' => __('Pro feature not available.', 'smart-restock-waitlist'))));
    }
    
    /**
     * Create database tables
     */
    public function create_tables() {
        global $wpdb;
        
        $charset_collate = $wpdb->get_charset_collate();
        
        // Waitlist table
        $table_waitlist = $wpdb->prefix . 'srwm_waitlist';
        $sql_waitlist = "CREATE TABLE $table_waitlist (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            product_id bigint(20) NOT NULL,
            customer_email varchar(255) NOT NULL,
            customer_name varchar(255) DEFAULT '',
            date_added datetime DEFAULT CURRENT_TIMESTAMP,
            notified tinyint(1) DEFAULT 0,
            PRIMARY KEY (id),
            KEY product_id (product_id),
            KEY customer_email (customer_email),
            KEY notified (notified)
        ) $charset_collate;";
        
        // Suppliers table
        $table_supplier = $wpdb->prefix . 'srwm_suppliers';
        $sql_supplier = "CREATE TABLE $table_supplier (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            product_id bigint(20) NOT NULL,
            supplier_name varchar(255) NOT NULL,
            supplier_email varchar(255) NOT NULL,
            threshold int(11) DEFAULT 5,
            channels longtext,
            auto_generate_po tinyint(1) DEFAULT 0,
            created_at datetime DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            KEY product_id (product_id),
            KEY supplier_email (supplier_email)
        ) $charset_collate;";
        
        // Restock logs table
        $table_logs = $wpdb->prefix . 'srwm_restock_logs';
        $sql_logs = "CREATE TABLE $table_logs (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            product_id bigint(20) NOT NULL,
            quantity int(11) NOT NULL,
            method varchar(50) DEFAULT 'manual',
            ip_address varchar(45) DEFAULT '',
            timestamp datetime DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            KEY product_id (product_id),
            KEY method (method),
            KEY timestamp (timestamp)
        ) $charset_collate;";
        
        // Pro tables - only create if license is active
        if ($this->license_manager->is_pro_active()) {
            // Restock tokens table
            $table_tokens = $wpdb->prefix . 'srwm_restock_tokens';
            $sql_tokens = "CREATE TABLE $table_tokens (
                id bigint(20) NOT NULL AUTO_INCREMENT,
                product_id bigint(20) NOT NULL,
                supplier_email varchar(255) NOT NULL,
                token varchar(255) NOT NULL,
                expires_at datetime NOT NULL,
                created_at datetime DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (id),
                KEY token (token),
                KEY expires_at (expires_at)
            ) $charset_collate;";
            
            // CSV upload tokens table
            $table_csv_tokens = $wpdb->prefix . 'srwm_csv_tokens';
            $sql_csv_tokens = "CREATE TABLE $table_csv_tokens (
                id bigint(20) NOT NULL AUTO_INCREMENT,
                supplier_email varchar(255) NOT NULL,
                token varchar(255) NOT NULL,
                expires_at datetime NOT NULL,
                created_at datetime DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (id),
                KEY token (token),
                KEY expires_at (expires_at)
            ) $charset_collate;";
            
            // Purchase orders table
            $table_po = $wpdb->prefix . 'srwm_purchase_orders';
            $sql_po = "CREATE TABLE $table_po (
                id bigint(20) NOT NULL AUTO_INCREMENT,
                po_number varchar(50) NOT NULL,
                product_id bigint(20) NOT NULL,
                supplier_email varchar(255) NOT NULL,
                quantity int(11) NOT NULL,
                status varchar(50) DEFAULT 'pending',
                pdf_path varchar(500) DEFAULT '',
                created_at datetime DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (id),
                KEY po_number (po_number),
                KEY product_id (product_id),
                KEY status (status)
            ) $charset_collate;";
            
            require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
            dbDelta($sql_tokens);
            dbDelta($sql_csv_tokens);
            dbDelta($sql_po);
        }
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        dbDelta($sql_waitlist);
        dbDelta($sql_supplier);
        dbDelta($sql_logs);
    }
    
    /**
     * Load text domain
     */
    public function load_textdomain() {
        load_plugin_textdomain('smart-restock-waitlist', false, dirname(plugin_basename(__FILE__)) . '/languages');
    }
    
    /**
     * Check if WooCommerce is active
     */
    private function is_woocommerce_active() {
        return in_array('woocommerce/woocommerce.php', apply_filters('active_plugins', get_option('active_plugins')));
    }
    
    /**
     * WooCommerce missing notice
     */
    public function woocommerce_missing_notice() {
        echo '<div class="notice notice-error"><p>' . 
             __('Smart Restock & Waitlist Manager requires WooCommerce to be installed and activated.', 'smart-restock-waitlist') . 
             '</p></div>';
    }
}

// Initialize the plugin
new SmartRestockWaitlistManager();